
"""
    This code was generated by Codezu.     

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
"""


from mozurestsdk.mozuclient import default as default_client
from mozurestsdk.mozuurl import MozuUrl;
from mozurestsdk.urllocation import UrlLocation
from mozurestsdk.apicontext import ApiContext;

class CustomerAccount(object):
	def __init__(self, apiContext: ApiContext = None, mozuClient = None):
		self.client = mozuClient or default_client();
		if (apiContext is not None):
			self.client.withApiContext(apiContext);
		else:
			self.client.withApiContext(ApiContext());
	
	def getAccounts(self,startIndex = None, pageSize = None, sortBy = None, filter = None, fields = None, q = None, qLimit = None, isAnonymous = False, responseFields = None):
		""" 
		
		Args:
			| startIndex (int) - 
			| pageSize (int) - 
			| sortBy (string) - 
			| filter (string) - 
			| fields (string) - The fields to include in the response.
			| q (string) - A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
			| qLimit (int) - The maximum number of search results to return in the response. You can limit any range between 1-100.
			| isAnonymous (bool) - If true, retrieve anonymous shopper accounts in the response.
			| responseFields (string) - 
		
		Returns:
			| CustomerAccountCollection 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}&fields={fields}&q={q}&qLimit={qLimit}&isAnonymous={isAnonymous}&responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("fields", fields);
		url.formatUrl("filter", filter);
		url.formatUrl("isAnonymous", isAnonymous);
		url.formatUrl("pageSize", pageSize);
		url.formatUrl("q", q);
		url.formatUrl("qLimit", qLimit);
		url.formatUrl("responseFields", responseFields);
		url.formatUrl("sortBy", sortBy);
		url.formatUrl("startIndex", startIndex);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def getLoginState(self,accountId, responseFields = None):
		""" 
		
		Args:
			| accountId (int) - Unique identifier of the customer account.
			| responseFields (string) - 
		
		Returns:
			| LoginState 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/loginstate?responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def getAccount(self,accountId, responseFields = None):
		""" 
		
		Args:
			| accountId (int) - Unique identifier of the customer account to retrieve.
			| responseFields (string) - 
		
		Returns:
			| CustomerAccount 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}?responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def addAccount(self,account, responseFields = None):
		""" 
		
		Args:
			| account(account) - Properties of the customer account to update.
			| responseFields (string) - 
		
		Returns:
			| CustomerAccount 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/?responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(account).execute();
		return self.client.result();

	
		
	def changePassword(self,passwordInfo, accountId, unlockAccount = False):
		""" 
		
		Args:
			| passwordInfo(passwordInfo) - The password information required to change the user password.
			| accountId (int) - The customer account information required to change the userpassword.
			| unlockAccount (bool) - 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/Change-Password?unlockAccount={unlockAccount}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		url.formatUrl("unlockAccount", unlockAccount);
		self.client.withResourceUrl(url).withBody(passwordInfo).execute();

	
		
	def addLoginToExistingCustomer(self,customerAuthInfo, accountId, responseFields = None):
		""" 
		
		Args:
			| customerAuthInfo(customerAuthInfo) - The authentication information for the customer account.
			| accountId (int) - Unique identifier of the customer account.
			| responseFields (string) - 
		
		Returns:
			| CustomerAuthTicket 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/Create-Login?responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(customerAuthInfo).execute();
		return self.client.result();

	
		
	def recomputeCustomerLifetimeValue(self,accountId):
		""" 
		
		Args:
			| accountId (int) - The unique identifier of the customer account for which to calculate customer lifetime value.
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/recomputelifetimevalue", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		self.client.withResourceUrl(url).execute();

	
		
	def setLoginLocked(self,isLocked, accountId):
		""" 
		
		Args:
			| isLocked(isLocked) - If true, the customer account is locked from logging in.
			| accountId (int) - The unique identifier of the customer account.
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/Set-Login-Locked", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		self.client.withResourceUrl(url).withBody(isLocked).execute();

	
		
	def setPasswordChangeRequired(self,isPasswordChangeRequired, accountId):
		""" 
		
		Args:
			| isPasswordChangeRequired(isPasswordChangeRequired) - If true, the password for the customer account must be changed.
			| accountId (int) - Unique identifier of the customer account.
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}/Set-Password-Change-Required", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		self.client.withResourceUrl(url).withBody(isPasswordChangeRequired).execute();

	
		
	def addAccountAndLogin(self,accountAndAuthInfo, responseFields = None):
		""" 
		
		Args:
			| accountAndAuthInfo(accountAndAuthInfo) - Properties of the customer account to create, including the user authentication information.
			| responseFields (string) - 
		
		Returns:
			| CustomerAuthTicket 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/Add-Account-And-Login?responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(accountAndAuthInfo).execute();
		return self.client.result();

	
		
	def addAccounts(self,customers, responseFields = None):
		""" 
		
		Args:
			| customers(array|customers) - Properties of the customer accounts to create.
			| responseFields (string) - 
		
		Returns:
			| CustomerAccountCollection 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/Bulk?responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(customers).execute();
		return self.client.result();

	
		
	def changePasswords(self,accountPasswordInfos, responseFields = None):
		""" 
		
		Args:
			| accountPasswordInfos(accountPasswordInfos) - 
			| responseFields (string) - 
		
		Returns:
			| ChangePasswordResultCollection 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/Change-Passwords?responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(accountPasswordInfos).execute();
		return self.client.result();

	
		
	def getLoginStateByEmailAddress(self,emailAddress, customerSetCode = None, responseFields = None):
		""" 
		
		Args:
			| emailAddress (string) - The email address associated with the customer account.
			| customerSetCode (string) - 
			| responseFields (string) - 
		
		Returns:
			| LoginState 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/loginstatebyemailaddress?emailAddress={emailAddress}&responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("customerSetCode", customerSetCode);
		url.formatUrl("emailAddress", emailAddress);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def getLoginStateByUserName(self,userName, customerSetCode = None, responseFields = None):
		""" 
		
		Args:
			| userName (string) - The user name associated with the customer account.
			| customerSetCode (string) - 
			| responseFields (string) - 
		
		Returns:
			| LoginState 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/loginstatebyusername?userName={userName}&customerSetCode={customerSetCode}&responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("customerSetCode", customerSetCode);
		url.formatUrl("responseFields", responseFields);
		url.formatUrl("userName", userName);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def getCustomersPurchaseOrderAccounts(self,startIndex = None, pageSize = None, sortBy = None, responseFields = None):
		""" 
		
		Args:
			| startIndex (int) - 
			| pageSize (int) - 
			| sortBy (string) - 
			| responseFields (string) - 
		
		Returns:
			| CustomerPurchaseOrderAccountCollection 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/purchaseOrderAccounts?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&responseFields={responseFields}", "POST", UrlLocation.TenantPod, False);
		url.formatUrl("pageSize", pageSize);
		url.formatUrl("responseFields", responseFields);
		url.formatUrl("sortBy", sortBy);
		url.formatUrl("startIndex", startIndex);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def resetPassword(self,resetPasswordInfo):
		""" 
		
		Args:
			| resetPasswordInfo(resetPasswordInfo) - Information required to reset the password for a customer account.
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/Reset-Password", "POST", UrlLocation.TenantPod, False);
		self.client.withResourceUrl(url).withBody(resetPasswordInfo).execute();

	
		
	def updateAccount(self,account, accountId, responseFields = None):
		""" 
		
		Args:
			| account(account) - Properties of the customer account to update.
			| accountId (int) - Unique identifier of the customer account.
			| responseFields (string) - 
		
		Returns:
			| CustomerAccount 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}?responseFields={responseFields}", "PUT", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).withBody(account).execute();
		return self.client.result();

	
		
	def deleteAccount(self,accountId):
		""" 
		
		Args:
			| accountId (int) - Unique identifier of the customer account to delete.
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/customer/accounts/{accountId}", "DELETE", UrlLocation.TenantPod, False);
		url.formatUrl("accountId", accountId);
		self.client.withResourceUrl(url).execute();

	
	
	