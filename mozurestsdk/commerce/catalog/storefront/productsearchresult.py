
"""
    This code was generated by Codezu.     

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
"""


from mozurestsdk.mozuclient import default as default_client
from mozurestsdk.mozuurl import MozuUrl;
from mozurestsdk.urllocation import UrlLocation
from mozurestsdk.apicontext import ApiContext;

class ProductSearchResult(object):
	def __init__(self, apiContext: ApiContext = None, mozuClient = None):
		self.client = mozuClient or default_client();
		if (apiContext is not None):
			self.client.withApiContext(apiContext);
		else:
			self.client.withApiContext(ApiContext());
	
	def getRandomAccessCursor(self,query = None, filter = None, pageSize = None, responseFields = None):
		""" 
		
		Args:
			| query (string) - 
			| filter (string) - 
			| pageSize (int) - 
			| responseFields (string) - 
		
		Returns:
			| ProductSearchRandomAccessCursor 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/catalog/storefront/productsearch/randomAccessCursor/?query={query}&filter={filter}&pageSize={pageSize}&responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("filter", filter);
		url.formatUrl("pageSize", pageSize);
		url.formatUrl("query", query);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def search(self,query = None, filter = None, facetTemplate = None, facetTemplateSubset = None, facet = None, facetFieldRangeQuery = None, facetHierPrefix = None, facetHierValue = None, facetHierDepth = None, facetStartIndex = None, facetPageSize = None, facetSettings = None, facetValueFilter = None, sortBy = None, pageSize = None, startIndex = None, searchSettings = None, enableSearchTuningRules = False, searchTuningRuleContext = None, searchTuningRuleCode = None, facetTemplateExclude = None, facetPrefix = None, responseOptions = None, cursorMark = None, facetValueSort = None, responseFields = None):
		""" 
		
		Args:
			| query (string) - The terms to search on.
			| filter (string) - A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product search results by any of its properties, including product code, type, category, and name. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=categoryId+eq+12"
			| facetTemplate (string) - The facet template to use on the storefront. A template displays all facets associated with the template on the web storefront product search. Currently, only category-level facet templates are available.
			| facetTemplateSubset (string) - Display a subset of the facets defined in the template specified in facetTemplate parameter.
			| facet (string) - Individually list the facet fields you want to display in a web storefront product search.
			| facetFieldRangeQuery (string) - Display a range facet not specified in a template in a web storefront product search by listing the facet field and the range to display.
			| facetHierPrefix (string) - If filtering using category facets in a hierarchy, the parent categories you want to skip in the storefront product search. This parameter is only available for category facets.
			| facetHierValue (string) - If filtering using category facets in a hierarchy, the category in the hierarchy to begin faceting on. This parameter is only available for category facets.
			| facetHierDepth (string) - If filtering using category facets in a hierarchy, the number of category hierarchy levels to return for the facet. This option is only available for category facets.
			| facetStartIndex (string) - When paging through multiple facets, the startIndex value for each facet.
			| facetPageSize (string) - The number of facet values to return for one or more facets.
			| facetSettings (string) - Settings reserved for future facet search functionality on a web storefront product search.
			| facetValueFilter (string) - The facet values to apply to the filter.
			| sortBy (string) - The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property.
			| pageSize (int) - Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 12. Max value is 200.
			| startIndex (int) - 
			| searchSettings (string) - 
			| enableSearchTuningRules (bool) - 
			| searchTuningRuleContext (string) - 
			| searchTuningRuleCode (string) - 
			| facetTemplateExclude (string) - 
			| facetPrefix (string) - 
			| responseOptions (string) - 
			| cursorMark (string) - 
			| facetValueSort (string) - 
			| responseFields (string) - 
		
		Returns:
			| ProductSearchResult 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/catalog/storefront/productsearch/search/?query={query}&filter={filter}&facetTemplate={facetTemplate}&facetTemplateSubset={facetTemplateSubset}&facet={facet}&facetFieldRangeQuery={facetFieldRangeQuery}&facetHierPrefix={facetHierPrefix}&facetHierValue={facetHierValue}&facetHierDepth={facetHierDepth}&facetStartIndex={facetStartIndex}&facetPageSize={facetPageSize}&facetSettings={facetSettings}&facetValueFilter={facetValueFilter}&sortBy={sortBy}&pageSize={pageSize}&startIndex={startIndex}&searchSettings={searchSettings}&enableSearchTuningRules={enableSearchTuningRules}&searchTuningRuleContext={searchTuningRuleContext}&searchTuningRuleCode={searchTuningRuleCode}&facetTemplateExclude={facetTemplateExclude}&facetPrefix={facetPrefix}&responseOptions={responseOptions}&cursorMark={cursorMark}&facetValueSort={facetValueSort}&responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("cursorMark", cursorMark);
		url.formatUrl("enableSearchTuningRules", enableSearchTuningRules);
		url.formatUrl("facet", facet);
		url.formatUrl("facetFieldRangeQuery", facetFieldRangeQuery);
		url.formatUrl("facetHierDepth", facetHierDepth);
		url.formatUrl("facetHierPrefix", facetHierPrefix);
		url.formatUrl("facetHierValue", facetHierValue);
		url.formatUrl("facetPageSize", facetPageSize);
		url.formatUrl("facetPrefix", facetPrefix);
		url.formatUrl("facetSettings", facetSettings);
		url.formatUrl("facetStartIndex", facetStartIndex);
		url.formatUrl("facetTemplate", facetTemplate);
		url.formatUrl("facetTemplateExclude", facetTemplateExclude);
		url.formatUrl("facetTemplateSubset", facetTemplateSubset);
		url.formatUrl("facetValueFilter", facetValueFilter);
		url.formatUrl("facetValueSort", facetValueSort);
		url.formatUrl("filter", filter);
		url.formatUrl("pageSize", pageSize);
		url.formatUrl("query", query);
		url.formatUrl("responseFields", responseFields);
		url.formatUrl("responseOptions", responseOptions);
		url.formatUrl("searchSettings", searchSettings);
		url.formatUrl("searchTuningRuleCode", searchTuningRuleCode);
		url.formatUrl("searchTuningRuleContext", searchTuningRuleContext);
		url.formatUrl("sortBy", sortBy);
		url.formatUrl("startIndex", startIndex);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
		
	def suggest(self,query = None, groups = None, pageSize = None, responseFields = None):
		""" 
		
		Args:
			| query (string) - 
			| groups (string) - 
			| pageSize (int) - Indicates the maximum number of entities to return from a query. Default value: 10. Max value: 200.
			| responseFields (string) - 
		
		Returns:
			| SearchSuggestionResult 
		
		Raises:
			| ApiException
		
		"""

		url = MozuUrl("/api/commerce/catalog/storefront/productsearch/suggest?query={query}&groups={groups}&pageSize={pageSize}&responseFields={responseFields}", "GET", UrlLocation.TenantPod, False);
		url.formatUrl("groups", groups);
		url.formatUrl("pageSize", pageSize);
		url.formatUrl("query", query);
		url.formatUrl("responseFields", responseFields);
		self.client.withResourceUrl(url).execute();
		return self.client.result();

	
	
	